---
- name: Initial configuration of Ceph
  when: "inventory_hostname == groups[pve_ceph_mon_group][0]"
  block:
    - name: Create initial Ceph config
      ansible.builtin.command: "pveceph init --network {{ pve_ceph_network }}  \
               {% if pve_ceph_cluster_network is defined %} \
                  --cluster-network {{ pve_ceph_cluster_network }}
               {% endif %}"
      args:
        creates: /etc/ceph/ceph.conf

    - name: Create initial Ceph monitor
      ansible.builtin.command: 'pveceph mon create'
      args:
        creates: '/var/lib/ceph/mon/ceph-{{ ansible_hostname }}/'
      register: _ceph_initial_mon

    - name: Fail if initial monitor creation failed
      ansible.builtin.fail:
        msg: 'Ceph intial monitor creation failed.'
      when: _ceph_initial_mon is failed

- name: Create additional Ceph monitors
  ansible.builtin.command: 'pveceph mon create'
  args:
    creates: '/var/lib/ceph/mon/ceph-{{ ansible_hostname }}/'
  when:
    - "inventory_hostname != groups[pve_ceph_mon_group][0]"
    - "inventory_hostname in groups[pve_ceph_mon_group]"

- name: Create additional Ceph managers
  ansible.builtin.command: 'pveceph mgr create'
  args:
    creates: '/var/lib/ceph/mgr/ceph-{{ ansible_hostname }}/'
  when: "inventory_hostname in groups[pve_ceph_mgr_group]"

- name: Gather facts
  block:
    - name: Gather facts about available disks
      ansible.builtin.setup:
        filter: ansible_devices

    - name: Initialize empty list for sata OSDs
      ansible.builtin.set_fact:
        _sata_osds: []
      no_log: true

    - name: Initialize empty list for nvme OSDs
      ansible.builtin.set_fact:
        _nvme_osds: []
      no_log: true

    - name: Initialize empty list for Ceph OSDs
      ansible.builtin.set_fact:
        _ceph_osds: []
      no_log: true

    - name: Initialize empty list for unprovisioned OSDs
      ansible.builtin.set_fact:
        _ceph_osds_diff: []
      no_log: true

    - name: Initialize empty list for existing Ceph OSDs
      ansible.builtin.set_fact:
        _existing_ceph_osds: []
      no_log: true

    - name: Initialize empty list for boot device
      ansible.builtin.set_fact:
        _boot_device: []
      no_log: true

    - name: Get boot drive
      ansible.builtin.set_fact:
        _boot_device: "{{ ansible_mounts | json_query('[?mount == `/`].device') }}"
      no_log: true

    - name: Generate OSDs for SATA devices
      ansible.builtin.set_fact:
        _sata_osds: "{{ _sata_osds + [{'device': item.key, 'crush.device.class': 'hdd'}] }}"
      no_log: true
      with_dict: "{{ ansible_devices }}"
      when: item.value.host.startswith('SATA') or
            item.value.host.startswith('AHCI') or
            item.value.host.startswith('ATA') and
            item.key not in _boot_device
      loop_control:
        label: "{{ item.key }}"

    - name: Generate OSDs for NVMe devices
      ansible.builtin.set_fact:
        _nvme_osds: "{{ _nvme_osds + [{'device': item.key, 'crush.device.class': 'nvme'}] }}"
      no_log: true
      with_dict: "{{ ansible_devices }}"
      when: item.value.host.startswith('NVMe') or
            item.value.host.startswith('NVM') or
            item.value.host.startswith('PCIe') and
            item.key not in _boot_device
      loop_control:
        label: "{{ item.key }}"

    - name: Combine SATA and NVMe OSDs
      ansible.builtin.set_fact:
        _ceph_osds: "{{ _sata_osds + _nvme_osds }}"
      no_log: true

- name: Create Ceph OSDs
  block:
    - name: Query for existing Ceph volumes
      pve_ceph_volume:
      check_mode: no
      register: _ceph_volume_data

    - name: Generate a list of active OSDs
      ansible.builtin.set_fact:
        _existing_ceph_osds: "{{ _ceph_volume_data.stdout | from_json | json_query('*[].devices[]') | default([]) }}"

    - name: Generate list of unprovisioned OSDs
      ansible.builtin.set_fact:
        _ceph_osds_diff: "{{ _ceph_osds_diff | default([]) + [item] }}"
      loop: "{{ _ceph_osds }}"
      when: item.device not in _existing_ceph_osds

    - name: Create Ceph OSDs
      ansible.builtin.command: >-
        pveceph osd create {{ item.device }}
        {% if "crush.device.class" in item %}--crush-device-class {{ item["crush.device.class"] }}{% endif %}
        {% if "encrypted" in item and item["encrypted"] | bool %}--encrypted 1{% endif %}
        {% if "block.db" in item %}--db_dev {{ item["block.db"] }}{% endif %}
        {% if "block.wal" in item %}--wal_dev {{ item["block.wal"] }}{% endif %}
      loop: '{{ _ceph_osds_diff | default([]) }}'
      when: _ceph_osds_diff | length > 0
      register: _ceph_osd_create
