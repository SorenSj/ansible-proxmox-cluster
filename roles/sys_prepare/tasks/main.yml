---
- name: Configure SMT control
  ansible.builtin.shell: echo {{ smt }} > /sys/devices/system/cpu/smt/control
  when:
    - change_smt | default(false)
    - smt is defined
    - smt in ['on', 'off']
  changed_when: false

- name: Set IOMMU parameters based on CPU vendor
  ansible.builtin.set_fact:
    iommu_param: >-
      {{ 'amd_iommu=on' if 'AuthenticAMD' in global_cpu_vendor else 'intel_iommu=on' }}

- name: Collect kernel parameters
  ansible.builtin.set_fact:
    kernel_params: >-
      {{ 'amd_pstate=' + pve_amd_pstate if pve_pstate_performance | default(false) and 'AuthenticAMD' in global_cpu_vendor else '' }}
      {{ 'intel_pstate=' + pve_intel_pstate if pve_pstate_performance | default(false) and 'GenuineIntel' in global_cpu_vendor else '' }}
      {{ 'nosmt=force' if change_smt | default(false) and smt == 'off' else '' }}
      {{ 'ipv6.disable=1' if disable_ipv6 | default(false) else '' }}
      {{ default_kernel_params }}
      {{ iommu_param }}

- name: Update kernel parameters in GRUB
  ansible.builtin.lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX_DEFAULT='
    line: >-
      GRUB_CMDLINE_LINUX_DEFAULT="{{ (kernel_params.split() | unique | join(' ')) | trim }}"
    create: true
    mode: '0644'
    owner: root
    group: root
  notify: Update GRUB
  when: global_boot_mode.strip() != 'efi'

- name: Update kernel parameters in EFI
  when: global_boot_mode.strip() == 'efi'
  block:
    - name: Read existing kernel parameters from EFI
      ansible.builtin.slurp:
        src: /etc/kernel/cmdline
      register: existing_cmdline

    - name: Merge new kernel parameters with existing ones
      ansible.builtin.set_fact:
        merged_kernel_params: >-
          {{ ((existing_cmdline.content | b64decode | trim | replace('\n', ' ') | replace('\r', ' ') | split(" ")) +
              (kernel_params.split())) |
             unique |
             join(" ") | trim }}

    - name: Write updated kernel parameters to EFI
      ansible.builtin.copy:
        dest: /etc/kernel/cmdline
        content: "{{ merged_kernel_params }}"
        mode: '0644'
      notify: Proxmox Boot Tool Refresh

- name: Disable IPv6 in sysctl
  ansible.builtin.copy:
    dest: /etc/sysctl.d/99-disable-ipv6.conf
    content: |
      net.ipv6.conf.all.disable_ipv6 = 1
      net.ipv6.conf.default.disable_ipv6 = 1
      net.ipv6.conf.lo.disable_ipv6 = 1
    mode: '0644'
  notify:
    - Reload sysctl
  when: disable_ipv6 | default(false)

- name: Comment out any line containing ip6tables-restore
  ansible.builtin.lineinfile:
    path: /usr/share/perl5/PVE/Firewall.pm
    regexp: "^(?!#)(.*ip6tables-restore.*)"
    line: "# \\1"
    backrefs: true
    state: present
  notify: Restart pve-firewall
  when: disable_ipv6 | default(false)

- name: Manage specified services
  ansible.builtin.systemd:
    name: "{{ item.name }}"
    state: "{{ 'stopped' if item.disable else 'started' }}"
    enabled: "{{ 'no' if item.disable else 'yes' }}"
  loop: "{{ services_to_disable }}"
  when: services_to_disable is defined and services_to_disable | length > 0

- name: Disable AppArmor service
  ansible.builtin.systemd:
    name: apparmor
    enabled: false
    state: stopped
  when: apparmor_disable | default(false)

- name: Set swappiness
  ansible.builtin.sysctl:
    name: vm.swappiness
    value: "{{ pve_swappiness }}"
    state: present
    reload: yes
