---
- name: Get Proxmox version
  ansible.builtin.command: pveversion
  register: proxmox_pveversion_info
  changed_when: false

- name: Extract Proxmox major version
  ansible.builtin.set_fact:
    proxmox_pve_major: "{{ proxmox_pveversion_info.stdout.split('/')[1].split('.')[0] | int }}"

- name: Detect CPU vendor
  ansible.builtin.command: cat /proc/cpuinfo
  register: cpu_vendor
  changed_when: false

- name: Set global fact for CPU vendor
  ansible.builtin.set_fact:
    global_cpu_vendor: "{{ cpu_vendor.stdout }}"

- name: Install required packages
  ansible.builtin.apt:
    name: >-
      {{
        (['fio', 'unattended-upgrades', 'locales', 'sudo', 'lockfile-progs', 'python3-jmespath', 'python3-dnspython'] ) +
        (['ipmitool'] if ansible_facts.virtualization_role != 'guest' else []) +
        (['proxmox-secure-boot-support'] if (proxmox_pve_major | int) >= 8 else []) +
        (['intel-microcode'] if 'GenuineIntel' in global_cpu_vendor and (proxmox_pve_major | int) >= 8 else []) +
        (['amd64-microcode'] if 'AuthenticAMD' in global_cpu_vendor and (proxmox_pve_major | int) >= 8 else []) +
        (['fail2ban'] if fail2ban_enable | default(false) else []) +
        (['lm-sensors'] if web_show_temperatures | default(false) else []) +
        (install_packages.split() if install_packages | default('') | length > 0 else [])
      }}
    state: present
    update_cache: true

- name: Uninstall packages
  ansible.builtin.apt:
    name: >-
      {{
        (uninstall_packages.split() if uninstall_packages | default('') | length > 0 else [])
      }}
    state: absent
    purge: true

- name: Stage packages needed for base PVE installation
  ansible.builtin.set_fact:
    _pve_install_packages:
      - proxmox-ve
      - open-iscsi
      - ksm-control-daemon
      - systemd-sysv
      - apt-transport-https
      - ca-certificates
      - lsb-release

- name: Stage ZFS packages if ZFS is enabled
  ansible.builtin.set_fact:
    _pve_install_packages: "{{ _pve_install_packages | union(['linux-headers-amd64', 'zfsutils-linux', 'zfs-initramfs', 'zfs-zed', 'zfs-dkms']) }}"
  when: "pve_zfs_enabled | bool"

- name: Stage Ceph packages if Ceph is enabled
  ansible.builtin.set_fact:
    _pve_install_packages: "{{ _pve_install_packages | union(['ceph', 'ceph-common', 'ceph-mds', 'ceph-fuse', 'gdisk']) }}"
  when: "pve_ceph_enabled | bool"

- name: Stage any extra packages the user has specified
  ansible.builtin.set_fact:
    _pve_install_packages: "{{ _pve_install_packages | union(pve_extra_packages) }}"

- name: Install Proxmox VE and related packages
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 3600
    name: "{{ _pve_install_packages }}"
    state: "{{ 'latest' if pve_run_proxmox_upgrades else 'present' }}"
  retries: 2
  register: _proxmox_install
  until: _proxmox_install is succeeded
