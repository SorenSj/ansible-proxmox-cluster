---
# tasks file for ceph_storage
- name: Create 'storage'
  when: "inventory_hostname == groups[pve_ceph_mon_group][0]"
  block:
    - name: List Ceph CRUSH rules
      ansible.builtin.command: 'ceph osd crush rule ls'
      changed_when: false
      register: _ceph_crush

    - name: Create Ceph CRUSH rules
      ansible.builtin.command: >-
        ceph osd crush rule create-replicated
        {{ item.name }} default {{ item.type | default ("host") }} {{ item.class | default("") }}
      when: item.name not in _ceph_crush.stdout_lines
      with_items: '{{ pve_ceph_crush_rules }}'

    - name: Modify CRUSH map block
      block:
        - name: Download and decompress crushmap
          ansible.builtin.command: "{{ item }}"
          with_items:
            - ceph osd getcrushmap -o crush_map_compressed
            - crushtool -d crush_map_compressed -o crush_map_decompressed
          changed_when: false # This is just getting information for us to possibly edit, don't mislead user with 'changed'

        - name: Modify local crushmap for rules that should be updated
          ansible.builtin.replace:
            path: crush_map_decompressed
            regexp: >-
              rule\s+{{ item.name }}\s+{(?:(?P<space>\s+)id\s+(?P<id>[^\s]+)|\s+type\s+(?P<r_type>[^\s]+)|\s+min_size[ ](?P<min>[^\s]+)|\s+max_size\s+(?P<max>[^\s]+)|\s+step\s+take\s+default(?:\n|\s+class\s+(?P<class>[^\n]*))|\s+step\s+(?P<choose>chooseleaf|choose).*?type\s+(?P<type>[^\s]+))+(?:.|\n)*?}
            replace: >-
              rule {{ item.name }} {
              \g<space>id \g<id>
              \g<space>type \g<r_type>
              \g<space>min_size {{ (pve_ceph_crush_rules | selectattr("name", "match", item.name) | list)[0].min_size | default("\g<min>") | trim }}
              \g<space>max_size {{ (pve_ceph_crush_rules | selectattr("name", "match", item.name) | list)[0].max_size | default("\g<max>") | trim }}
              {%- if ((pve_ceph_crush_rules | selectattr("name", "match", item.name) | list)[0].class | default(False)) -%}
                \g<space>step take default class {{ (pve_ceph_crush_rules | selectattr("name", "match", item.name) | list)[0].class }}
              {%- else -%}
                \g<space>step take default\g<class>
              {%- endif -%}
              \g<space>step \g<choose> firstn 0 type {{ (pve_ceph_crush_rules | selectattr("name", "match", item.name) | list)[0].type | default("\g<type>") | trim }}
              \g<space>step emit
              }
          loop: '{{ pve_ceph_crush_rules }}'
          register: _crushmap

        - name: Validate and compress new crushmap
          ansible.builtin.command: crushtool -c crush_map_decompressed -o new_crush_map_compressed
          register: _crushmap_valid
          when: _crushmap.changed

        - name: Upload new crushmap
          ansible.builtin.command: ceph osd setcrushmap -i new_crush_map_compressed
          with_items:
            - ceph osd setcrushmap -i new_crush_map_compressed
          when: _crushmap.changed and _crushmap_valid.rc == 0

        - name: Cleanup temp files from generating new crushmap
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          with_items:
            - crush_map_compressed
            - crush_map_decompressed
            - new_crush_map_compressed
          changed_when: false # This will always trigger as the files are created to do the initial checks, lets not confuse the user with 'changed'

    - name: List Ceph Pools
      ansible.builtin.command: ceph osd pool ls
      changed_when: false
      check_mode: no
      register: _ceph_pools

    - name: Create Ceph Pools
      ansible.builtin.command: >-
        pveceph pool create {{ item.name }}
        {% if 'storage' in item %}
        --add_storages {{ item.storage }}
        {% endif %}
        {% if 'application' in item %}
        --application {{ item.application }}
        {% endif %}
        {% if 'rule' in item %}
        --crush_rule {{ item.rule }}
        {% endif %}
        {% if 'autoscale_mode' in item %}
        --pg_autoscale_mode {{ item.autoscale_mode }}
        {% endif %}
        {% if 'pgs' in item %}
        --pg_num {{ item.pgs }}
        {% endif %}
        {% if 'size' in item %}
        --size {{ item.size }}
        {% endif %}
        {% if 'min_size' in item %}
        --min_size {{ item.min_size }}
        {% endif %}
      when: item.name not in _ceph_pools.stdout_lines
      with_items: '{{ pve_ceph_pools }}'
