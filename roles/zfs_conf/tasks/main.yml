---
- name: Configure ZFS
  when: pve_zfs_enabled | default(false) | bool
  block:
    - name: Ensure ZFS is installed
      ansible.builtin.package:
        name: zfsutils-linux
        state: present
      register: zfs_install_result

    - name: Ensure ZFS kernel module is loaded
      ansible.builtin.modprobe:
        name: zfs
        state: present
      register: zfs_modprobe_result

    - name: Ensure ZFS service is running and enabled
      ansible.builtin.systemd:
        name: zfs-import-cache
        state: started
        enabled: true
      register: zfs_service_result

    - name: Create ZFS configuration directory
      ansible.builtin.file:
        path: /etc/zfs
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Create ZFS configuration file
      ansible.builtin.template:
        src: zfs.conf.j2
        dest: /etc/zfs/zfs.conf
        owner: root
        group: root
        mode: '0644'
      when: zfs_install_result.changed or zfs_modprobe_result.changed or zfs_service_result.changed

    - name: Get ZFS pool device
      ansible.builtin.set_fact:
        zfs_pool_device: "/dev/{{ item.key }}"
      with_dict: "{{ ansible_devices }}"
      when: "(item.value.links.ids[0] | default()) == zfs_device_id"
      no_log: true

    - name: Debug ZFS pool device
      debug:
        msg: "ZFS pool device found: {{ zfs_pool_device }}"

    - name: Create ZFS pool
      ansible.builtin.shell: |
        zpool create -f {{ zfs_pool_name }} {{ zfs_pool_device }}
      args:
        creates: "/dev/mapper/{{ zfs_pool_name }}"
      when: zfs_pool_name is defined and zfs_pool_device is defined
      register: zfs_pool_create_result
      changed_when: zfs_pool_create_result.rc == 0
      failed_when: zfs_pool_create_result.rc not in [0, 1]  # Allow for pool already existing

    - name: Add ZFS pool as storage in Proxmox
      proxmox_storage:
        nodes: "{{ ansible_hostname }}"
        storage: "{{ zfs_pool_name }}"
        type: zfspool
        content: images
        pool: "{{ zfs_pool_name }}"
        state: present
        # Add other relevant storage settings here (e.g., nodes, maxfiles)

    - name: Create a ZFS dataset
      ansible.builtin.shell: |
        zfs create -f {{ zfs_pool_name }}/vms
      args:
        creates: /dev/mapper/{{ zfs_pool_name }}-vms

    - name: Add the dataset as storage in Proxmox
      proxmox_storage:
        node: "{{ ansible_hostname }}"
        storage: "{{ zfs_pool_name }}_vms"
        type: zfs
        content: images, container
        pool: "{{ zfs_pool_name }}"
        dataset: vms
        state: present

    - name: Ensure ZFS pool is imported
      ansible.builtin.command:
        cmd: zpool import -a
      when: zfs_pool_name is defined and _zfs_pool_device is defined
      register: zfs_pool_import_result
      changed_when: zfs_pool_import_result.rc == 0
      failed_when: zfs_pool_import_result.rc not in [0, 1]

    - name: Ensure ZFS pool is online
      ansible.builtin.command:
        cmd: zpool online {{ zfs_pool_name }} {{ _zfs_pool_device }}
      when: zfs_pool_name is defined and _zfs_pool_device is defined
      register: zfs_pool_online_result
      changed_when: zfs_pool_online_result.rc == 0
      failed_when: zfs_pool_online_result.rc not in [0, 1]

    - name: Ensure ZFS pool is healthy
      ansible.builtin.command:
        cmd: zpool status {{ zfs_pool_name }}
      when: zfs_pool_name is defined and zfs_pool_device is defined
      register: zfs_pool_status_result
      changed_when: false
      failed_when: zfs_pool_status_result.rc != 0

    - name: Check if ZFS pools exist
      ansible.builtin.command: zpool list
      register: zpool_status
      changed_when: false
      failed_when: zpool_status.rc != 0

    - name: Determine if ZFS pools are present
      ansible.builtin.set_fact:
        zfs_pools_exist: "{{ 'no pools available' not in zpool_status.stdout and zpool_status.stdout.strip() != '' }}"

    - name: Configure ZFS ARC parameters
      when:
        - zfs_pools_exist
        - set_zfs_arc | default(false) | bool
      block:
        - name: Convert zfs_arc_min from GB to bytes
          ansible.builtin.set_fact:
            zfs_arc_min_bytes: "{{ zfs_arc_min * 1024 * 1024 * 1024 - 1 }}"
          when: zfs_arc_min_bytes is defined

        - name: Convert zfs_arc_max from GB to bytes
          ansible.builtin.set_fact:
            zfs_arc_max_bytes: "{{ zfs_arc_max * 1024 * 1024 * 1024 }}"
          when: zfs_arc_max_bytes is defined

        - name: Apply zfs_arc_min parameter temporarily
          ansible.builtin.shell:
            cmd: echo "{{ zfs_arc_min_bytes }}" > /sys/module/zfs/parameters/zfs_arc_min
          when: zfs_arc_min_bytes is defined
          changed_when: false

        - name: Apply zfs_arc_max parameter temporarily
          ansible.builtin.shell:
            cmd: echo "{{ zfs_arc_max_bytes }}" > /sys/module/zfs/parameters/zfs_arc_max
          when: zfs_arc_max_bytes is defined
          changed_when: false

        - name: Create or update ZFS configuration
          ansible.builtin.copy:
            dest: /etc/modprobe.d/zfs.conf
            content: |
              options zfs {% if zfs_arc_min_bytes is defined %}zfs_arc_min={{ zfs_arc_min_bytes }}{% endif %}
              options zfs {% if zfs_arc_max_bytes is defined %}zfs_arc_max={{ zfs_arc_max_bytes }}{% endif %}
            owner: root
            group: root
            mode: '0644'
          when: zfs_arc_min_bytes is defined or zfs_arc_max_bytes is defined
          notify: Reload ZFS Modules
